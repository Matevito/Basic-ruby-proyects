# game_methods.rb
module GameMethods
  def random_guess
    possible_nums = [1, 2, 3, 4, 5, 6]
    guess = []
    4.times do
      guess.push(possible_nums.sample)
    end
    guess
  end

  def print_game_evaluation(results)
    puts "Position and number correct: #{results[0]}"
    puts "Just number correct: #{results[1]}"
  end

  # this solve a bugg that affect the variable that holds the s_code of the round
  def make_copy(code)
    copy = []
    code.each do |number|
      copy.push(number)
    end
    copy
  end
end

class Mastermind
  include GameMethods
  @@game_guesses = [] # this can be saved in the cpu
  def check_guess(guess_, secret_code)
    # output:an array [color_position, color]
    # check color-position
    position = 0
    color =  0
    guess_.each_with_index do |number, index|
      if number == secret_code[index]
        position += 1
        secret_code[index] = 0 # to not affect the count of just color
      elsif secret_code.include?(number)
        color += 1
      end
    end
    # return the results of the analysis
    [position, color]
  end
end
def print_rules
  puts "\nWellcome to the mastermind experience!"
  puts "You can search in the readme information about the rules of the game. For the moment just
know that this version of Mastermind works with numbers 4 digits long using numbers from 1-6."
  puts '[1]: Try to guess the secret code generated by the game'
  puts '[2]: Create a secret code and hope for the cpu to not be able to guess it! (easy)'
  puts '[3]: Create a secret code and hope for the cpu to not be able to guess it! (hard)'
  puts '[4]: Exit'
end
